{% for ev_name,ev in evs.iteritems() %}
    {% set ev_num = loop.index %}
    
    # EV title
    set fmri(evtitle{{ ev_num }}) "{{ ev_name }}"
    
    # Basic waveform shape (EV {{ ev_num }})
    # 0 : Square
    # 1 : Sinusoid
    # 2 : Custom (1 entry per volume)
    # 3 : Custom (3 column format)
    # 4 : Interaction
    # 10 : Empty (all zeros)
    set fmri(shape{{ ev_num }}) 2
    
    # Convolution (EV {{ ev_num }})
    # 0 : None
    # 1 : Gaussian
    # 2 : Gamma
    # 3 : Double-Gamma HRF
    # 4 : Gamma basis functions
    # 5 : Sine basis functions
    # 6 : FIR basis functions
    set fmri(convolve1) 0
    
    # Convolution
    # 0 : None
    # 1 : Gaussian
    # 2 : Gamma
    # 3 : Double-Gamma HRF
    # 4 : Gamma basis functions
    # 5 : Sine basis functions
    # 6 : FIR basis functions
    set fmri(convolve{{ ev_num }}) 0
    
    # Convolve phase (EV {{ ev_num }})
    set fmri(convolve_phase{{ ev_num }}) 0

    # Apply temporal filtering (EV {{ ev_num }})
    set fmri(tempfilt_yn{{ ev_num }}) 0

    # Add temporal derivative (EV {{ ev_num }})
    set fmri(deriv_yn{{ ev_num }}) 0
    
    # Custom EV file (EV {{ ev_num }})
    set fmri(custom{{ ev_num }}) "dummy"
    
    # Orthogonalise EV {{ ev_num }} wrt EV 0
    set fmri(ortho{{ ev_num }}.0) {{ ev.ortho_yn|default(0)|int }}
    
    {% for i in range(loop.length) %}
        # Orthogonalise EV {{ ev_num }} wrt EV {{ loop.index }}
        set fmri(ortho{{ ev_num }}.{{ loop.index }}) 0
    {% endfor %}
    
    {% for val in ev %}
        {% set val_num = loop.index %}
        # Higher-level EV value for EV {{ ev_num }} and input {{ loop.index }}
        set fmri(evg{{ loop.index }}.{{ ev_num }}) {{ val|float }}
    {% endfor %}
{% endfor %}

{% for mem in groups %}
    # Group membership for input {{ loop.index }}
    set fmri(groupmem.{{ loop.index }}) {{ mem }}
{% endfor %}
